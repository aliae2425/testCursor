{"ast":null,"code":"const FORGE_CLIENT_ID = process.env.REACT_APP_FORGE_CLIENT_ID;\nconst FORGE_CLIENT_SECRET = process.env.REACT_APP_FORGE_CLIENT_SECRET;\nexport async function getAccessToken() {\n  const url = 'https://developer.api.autodesk.com/authentication/v1/authenticate';\n  const headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  };\n  const body = new URLSearchParams({\n    client_id: FORGE_CLIENT_ID,\n    client_secret: FORGE_CLIENT_SECRET,\n    grant_type: 'client_credentials',\n    scope: 'data:read viewables:read'\n  });\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: headers,\n      body: body\n    });\n    const data = await response.json();\n    return data.access_token;\n  } catch (error) {\n    console.error('Erreur lors de l\\'authentification:', error);\n    throw error;\n  }\n}\nexport async function uploadModel(file) {\n  const accessToken = await getAccessToken();\n\n  // 1. Créer un bucket si nécessaire\n  const bucketKey = 'teapot_preview_bucket';\n  await createBucket(accessToken, bucketKey);\n\n  // 2. Upload le fichier\n  const objectKey = `${Date.now()}_${file.name}`;\n  const uploadResponse = await uploadFile(accessToken, bucketKey, objectKey, file);\n\n  // 3. Traduire le fichier\n  const urn = btoa(uploadResponse.objectId);\n  await translateFile(accessToken, urn);\n  return urn;\n}\nasync function createBucket(accessToken, bucketKey) {\n  const url = 'https://developer.api.autodesk.com/oss/v2/buckets';\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${accessToken}`\n  };\n  const body = {\n    bucketKey,\n    policyKey: 'transient' // Le bucket sera supprimé après 24h\n  };\n  try {\n    await fetch(url, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(body)\n    });\n  } catch (error) {\n    var _error$response;\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) !== 409) {\n      // Ignorer l'erreur si le bucket existe déjà\n      throw error;\n    }\n  }\n}\nasync function uploadFile(accessToken, bucketKey, objectKey, file) {\n  const url = `https://developer.api.autodesk.com/oss/v2/buckets/${bucketKey}/objects/${objectKey}`;\n  const headers = {\n    'Content-Type': 'application/octet-stream',\n    'Authorization': `Bearer ${accessToken}`\n  };\n  const response = await fetch(url, {\n    method: 'PUT',\n    headers: headers,\n    body: file\n  });\n  return response.json();\n}\nasync function translateFile(accessToken, urn) {\n  const url = 'https://developer.api.autodesk.com/modelderivative/v2/designdata/job';\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${accessToken}`\n  };\n  const body = {\n    input: {\n      urn\n    },\n    output: {\n      formats: [{\n        type: 'svf',\n        views: ['2d', '3d']\n      }]\n    }\n  };\n  await fetch(url, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(body)\n  });\n}","map":{"version":3,"names":["FORGE_CLIENT_ID","process","env","REACT_APP_FORGE_CLIENT_ID","FORGE_CLIENT_SECRET","REACT_APP_FORGE_CLIENT_SECRET","getAccessToken","url","headers","body","URLSearchParams","client_id","client_secret","grant_type","scope","response","fetch","method","data","json","access_token","error","console","uploadModel","file","accessToken","bucketKey","createBucket","objectKey","Date","now","name","uploadResponse","uploadFile","urn","btoa","objectId","translateFile","policyKey","JSON","stringify","_error$response","status","input","output","formats","type","views"],"sources":["E:/07_Git/test/testCursor/src/services/forgeService.js"],"sourcesContent":["const FORGE_CLIENT_ID = process.env.REACT_APP_FORGE_CLIENT_ID;\r\nconst FORGE_CLIENT_SECRET = process.env.REACT_APP_FORGE_CLIENT_SECRET;\r\n\r\nexport async function getAccessToken() {\r\n  const url = 'https://developer.api.autodesk.com/authentication/v1/authenticate';\r\n  const headers = {\r\n    'Content-Type': 'application/x-www-form-urlencoded',\r\n  };\r\n  const body = new URLSearchParams({\r\n    client_id: FORGE_CLIENT_ID,\r\n    client_secret: FORGE_CLIENT_SECRET,\r\n    grant_type: 'client_credentials',\r\n    scope: 'data:read viewables:read',\r\n  });\r\n\r\n  try {\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: headers,\r\n      body: body,\r\n    });\r\n    const data = await response.json();\r\n    return data.access_token;\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'authentification:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function uploadModel(file) {\r\n  const accessToken = await getAccessToken();\r\n  \r\n  // 1. Créer un bucket si nécessaire\r\n  const bucketKey = 'teapot_preview_bucket';\r\n  await createBucket(accessToken, bucketKey);\r\n  \r\n  // 2. Upload le fichier\r\n  const objectKey = `${Date.now()}_${file.name}`;\r\n  const uploadResponse = await uploadFile(accessToken, bucketKey, objectKey, file);\r\n  \r\n  // 3. Traduire le fichier\r\n  const urn = btoa(uploadResponse.objectId);\r\n  await translateFile(accessToken, urn);\r\n  \r\n  return urn;\r\n}\r\n\r\nasync function createBucket(accessToken, bucketKey) {\r\n  const url = 'https://developer.api.autodesk.com/oss/v2/buckets';\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': `Bearer ${accessToken}`,\r\n  };\r\n  const body = {\r\n    bucketKey,\r\n    policyKey: 'transient', // Le bucket sera supprimé après 24h\r\n  };\r\n\r\n  try {\r\n    await fetch(url, {\r\n      method: 'POST',\r\n      headers: headers,\r\n      body: JSON.stringify(body),\r\n    });\r\n  } catch (error) {\r\n    if (error.response?.status !== 409) { // Ignorer l'erreur si le bucket existe déjà\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nasync function uploadFile(accessToken, bucketKey, objectKey, file) {\r\n  const url = `https://developer.api.autodesk.com/oss/v2/buckets/${bucketKey}/objects/${objectKey}`;\r\n  const headers = {\r\n    'Content-Type': 'application/octet-stream',\r\n    'Authorization': `Bearer ${accessToken}`,\r\n  };\r\n\r\n  const response = await fetch(url, {\r\n    method: 'PUT',\r\n    headers: headers,\r\n    body: file,\r\n  });\r\n  return response.json();\r\n}\r\n\r\nasync function translateFile(accessToken, urn) {\r\n  const url = 'https://developer.api.autodesk.com/modelderivative/v2/designdata/job';\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': `Bearer ${accessToken}`,\r\n  };\r\n  const body = {\r\n    input: {\r\n      urn,\r\n    },\r\n    output: {\r\n      formats: [\r\n        {\r\n          type: 'svf',\r\n          views: ['2d', '3d'],\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  await fetch(url, {\r\n    method: 'POST',\r\n    headers: headers,\r\n    body: JSON.stringify(body),\r\n  });\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}